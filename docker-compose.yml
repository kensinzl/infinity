version: "3.4"
services:
  mydb:
    build:
      context: .
      target: db
    container_name: postgres_db_test
    restart: always
    networks:
      default:
        aliases:
          - postgres_ip
    ports:
      - 5432:5432

  web:
    build: 
      context: .
      target: web_api
    container_name: infinity_web
    restart: always
    entrypoint: /build/entrypoint.sh
    # docker-compose entrypoint can overwrite the entrypoint of dockerfile.
    # here, entrypoint say hey this is our entrypoint.sh location
    # so, remove the entrypoint tag from dockerfile and let it is defined from docker-compose
    ports:
      - 8080:8080
    volumes:
      - ~/.m2:/root/.m2

# Note:
# 1. 
# I have not necessary explicitly to define the network for these two containers,
# the docker will create the default bridge network for me.

# You can use the following command to undestand.
# docker network ls                       -> you can see the created network name.
# docker network inspect network-name     -> you can see how many containers in this one network
# docker container inspect container-name -> you can see this container among which network
#
# Some example from Google to say using the links tag, which would be deprecated in the later.
# this tag is changed into the network tag.

# 2.
# Use the postgres service name(mydb) or aliaes name to change the ip of postgres among web project's application.yaml. 
# The following is my trial records.  
#   -> the original 'localhost' only works for this case when you run it without docker web container. 
#   -> later know the IP of mydb then changing the web application.yaml's postgres ip is definitely not good for the production.
#      but it helps me to know the postgres ip among the postgres container is equal to the service name or its aliaes name
# that means the result is 
#  datasource:
#    url: jdbc:postgresql://mydb:5432/DEV_DB
# Also can use the aliases name or service name. like mydb or postgres_ip

# 2021-11-21 finding, it is not necessary to make app and DB in a same docker-compose.yml file(same service) 
# because at that time I do not know the public IP of local host
# if eg: url: jdbc:postgresql://192.168.1.74:5432/DEV_DB, this 192.168.1.74 is the public ip of the host machine, it also works for seperate two docker-compose file,
# one for app and the other is for the DB
# 192.168.1.74 -> System Preference -> Network

# 3.
# ~/ shorthand for the current user's home folder among Linux or Mac
# ../ is the father path
# ./ is the current path
# In order to save the setup time, I can volume the local maven into the docker container.
# After googling, .m2 is on the user's home among Linux system 

# Image three projects(containers) and deployed among one docker-compose.yaml, M project referring E project refering T project
# The service name have to use the port among net rather than host

#   80         8080.   8081       => HOST
#--------------------------------
# |------|  |------| |------|
# | 8080 |. | 8080 | | 8080 |     => ISOLATION ONE NET, but three server
# |------|  |------| |------|
#--------------------------------
